// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GetBuff extends ethereum.Event {
  get params(): GetBuff__Params {
    return new GetBuff__Params(this);
  }
}

export class GetBuff__Params {
  _event: GetBuff;

  constructor(event: GetBuff) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SendingToReferrerFailed extends ethereum.Event {
  get params(): SendingToReferrerFailed__Params {
    return new SendingToReferrerFailed__Params(this);
  }
}

export class SendingToReferrerFailed__Params {
  _event: SendingToReferrerFailed;

  constructor(event: SendingToReferrerFailed) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get passAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetRelayer extends ethereum.Event {
  get params(): SetRelayer__Params {
    return new SetRelayer__Params(this);
  }
}

export class SetRelayer__Params {
  _event: SetRelayer;

  constructor(event: SetRelayer) {
    this._event = event;
  }

  get relayer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetTournamentCA extends ethereum.Event {
  get params(): SetTournamentCA__Params {
    return new SetTournamentCA__Params(this);
  }
}

export class SetTournamentCA__Params {
  _event: SetTournamentCA;

  constructor(event: SetTournamentCA) {
    this._event = event;
  }

  get tournament(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subject(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isBuy(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get passAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get buyPriceAfterFeeAfterTx(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get referrerFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class BattleArena__getPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class BattleArena extends ethereum.SmartContract {
  static bind(address: Address): BattleArena {
    return new BattleArena("BattleArena", address);
  }

  buffs(param0: Address): BigInt {
    let result = super.call("buffs", "buffs(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_buffs(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buffs", "buffs(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributedAmounts(param0: Address): BigInt {
    let result = super.call(
      "distributedAmounts",
      "distributedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_distributedAmounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributedAmounts",
      "distributedAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  divideRates(param0: Address): BigInt {
    let result = super.call("divideRates", "divideRates(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_divideRates(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "divideRates",
      "divideRates(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPrice(passesSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPrice",
      "getBuyPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPrice(
    passesSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPrice",
      "getBuyPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPriceAfterFee(passesSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPriceAfterFee(
    passesSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(
    supply: BigInt,
    amount: BigInt,
    divideRate: BigInt
  ): BattleArena__getPriceResult {
    let result = super.call(
      "getPrice",
      "getPrice(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(divideRate)
      ]
    );

    return new BattleArena__getPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPrice(
    supply: BigInt,
    amount: BigInt,
    divideRate: BigInt
  ): ethereum.CallResult<BattleArena__getPriceResult> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(divideRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BattleArena__getPriceResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getSellPrice(passesSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPrice",
      "getSellPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPrice(
    passesSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPrice",
      "getSellPrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPriceAfterFee(passesSubject: Address, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPriceAfterFee(
    passesSubject: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(passesSubject),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTeamMembers(_team: Address): Array<Address> {
    let result = super.call(
      "getTeamMembers",
      "getTeamMembers(address):(address[])",
      [ethereum.Value.fromAddress(_team)]
    );

    return result[0].toAddressArray();
  }

  try_getTeamMembers(_team: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTeamMembers",
      "getTeamMembers(address):(address[])",
      [ethereum.Value.fromAddress(_team)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTeamMembersAtIndex(_team: Address, _index: BigInt): Address {
    let result = super.call(
      "getTeamMembersAtIndex",
      "getTeamMembersAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_team),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toAddress();
  }

  try_getTeamMembersAtIndex(
    _team: Address,
    _index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTeamMembersAtIndex",
      "getTeamMembersAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_team),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTeamMembersCount(_team: Address): BigInt {
    let result = super.call(
      "getTeamMembersCount",
      "getTeamMembersCount(address):(uint256)",
      [ethereum.Value.fromAddress(_team)]
    );

    return result[0].toBigInt();
  }

  try_getTeamMembersCount(_team: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTeamMembersCount",
      "getTeamMembersCount(address):(uint256)",
      [ethereum.Value.fromAddress(_team)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  passesBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "passesBalance",
      "passesBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_passesBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "passesBalance",
      "passesBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  passesHolders(param0: Address): BigInt {
    let result = super.call(
      "passesHolders",
      "passesHolders(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_passesHolders(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "passesHolders",
      "passesHolders(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  passesSupply(param0: Address): BigInt {
    let result = super.call("passesSupply", "passesSupply(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_passesSupply(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "passesSupply",
      "passesSupply(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolFeeDestination(): Address {
    let result = super.call(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolFeeDestination(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolFeeDestination",
      "protocolFeeDestination():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFeePercent(): BigInt {
    let result = super.call(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeePercent",
      "protocolFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referralRevenue(param0: Address): BigInt {
    let result = super.call(
      "referralRevenue",
      "referralRevenue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_referralRevenue(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referralRevenue",
      "referralRevenue(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrer(param0: Address): Address {
    let result = super.call("referrer", "referrer(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_referrer(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("referrer", "referrer(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  referrerFeePercent(): BigInt {
    let result = super.call(
      "referrerFeePercent",
      "referrerFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_referrerFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "referrerFeePercent",
      "referrerFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relayer(): Address {
    let result = super.call("relayer", "relayer():(address)", []);

    return result[0].toAddress();
  }

  try_relayer(): ethereum.CallResult<Address> {
    let result = super.tryCall("relayer", "relayer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserve0(param0: Address): BigInt {
    let result = super.call("reserve0", "reserve0(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_reserve0(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserve0", "reserve0(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserve1(param0: Address): BigInt {
    let result = super.call("reserve1", "reserve1(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_reserve1(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reserve1", "reserve1(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subjectFeePercent(): BigInt {
    let result = super.call(
      "subjectFeePercent",
      "subjectFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_subjectFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subjectFeePercent",
      "subjectFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teams(param0: Address): boolean {
    let result = super.call("teams", "teams(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_teams(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("teams", "teams(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tournament(): Address {
    let result = super.call("tournament", "tournament():(address)", []);

    return result[0].toAddress();
  }

  try_tournament(): ethereum.CallResult<Address> {
    let result = super.tryCall("tournament", "tournament():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddTeamMembersCall extends ethereum.Call {
  get inputs(): AddTeamMembersCall__Inputs {
    return new AddTeamMembersCall__Inputs(this);
  }

  get outputs(): AddTeamMembersCall__Outputs {
    return new AddTeamMembersCall__Outputs(this);
  }
}

export class AddTeamMembersCall__Inputs {
  _call: AddTeamMembersCall;

  constructor(call: AddTeamMembersCall) {
    this._call = call;
  }

  get _team(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _members(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class AddTeamMembersCall__Outputs {
  _call: AddTeamMembersCall;

  constructor(call: AddTeamMembersCall) {
    this._call = call;
  }
}

export class BuyPassesCall extends ethereum.Call {
  get inputs(): BuyPassesCall__Inputs {
    return new BuyPassesCall__Inputs(this);
  }

  get outputs(): BuyPassesCall__Outputs {
    return new BuyPassesCall__Outputs(this);
  }
}

export class BuyPassesCall__Inputs {
  _call: BuyPassesCall;

  constructor(call: BuyPassesCall) {
    this._call = call;
  }

  get passesSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyPassesCall__Outputs {
  _call: BuyPassesCall;

  constructor(call: BuyPassesCall) {
    this._call = call;
  }
}

export class CreateTeamCall extends ethereum.Call {
  get inputs(): CreateTeamCall__Inputs {
    return new CreateTeamCall__Inputs(this);
  }

  get outputs(): CreateTeamCall__Outputs {
    return new CreateTeamCall__Outputs(this);
  }
}

export class CreateTeamCall__Inputs {
  _call: CreateTeamCall;

  constructor(call: CreateTeamCall) {
    this._call = call;
  }

  get _team(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateTeamCall__Outputs {
  _call: CreateTeamCall;

  constructor(call: CreateTeamCall) {
    this._call = call;
  }
}

export class DistributeCall extends ethereum.Call {
  get inputs(): DistributeCall__Inputs {
    return new DistributeCall__Inputs(this);
  }

  get outputs(): DistributeCall__Outputs {
    return new DistributeCall__Outputs(this);
  }
}

export class DistributeCall__Inputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }

  get subject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DistributeCall__Outputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _relayer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _protocolFeeDestination(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get trustedForwarders(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _protocolFeePercent(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _subjectFeePercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _referrerFeePercent(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveTeamMembersCall extends ethereum.Call {
  get inputs(): RemoveTeamMembersCall__Inputs {
    return new RemoveTeamMembersCall__Inputs(this);
  }

  get outputs(): RemoveTeamMembersCall__Outputs {
    return new RemoveTeamMembersCall__Outputs(this);
  }
}

export class RemoveTeamMembersCall__Inputs {
  _call: RemoveTeamMembersCall;

  constructor(call: RemoveTeamMembersCall) {
    this._call = call;
  }

  get _team(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _members(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class RemoveTeamMembersCall__Outputs {
  _call: RemoveTeamMembersCall;

  constructor(call: RemoveTeamMembersCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellPassesCall extends ethereum.Call {
  get inputs(): SellPassesCall__Inputs {
    return new SellPassesCall__Inputs(this);
  }

  get outputs(): SellPassesCall__Outputs {
    return new SellPassesCall__Outputs(this);
  }
}

export class SellPassesCall__Inputs {
  _call: SellPassesCall;

  constructor(call: SellPassesCall) {
    this._call = call;
  }

  get passesSubject(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellPassesCall__Outputs {
  _call: SellPassesCall;

  constructor(call: SellPassesCall) {
    this._call = call;
  }
}

export class SetFeeDestinationCall extends ethereum.Call {
  get inputs(): SetFeeDestinationCall__Inputs {
    return new SetFeeDestinationCall__Inputs(this);
  }

  get outputs(): SetFeeDestinationCall__Outputs {
    return new SetFeeDestinationCall__Outputs(this);
  }
}

export class SetFeeDestinationCall__Inputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }

  get _feeDestination(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeDestinationCall__Outputs {
  _call: SetFeeDestinationCall;

  constructor(call: SetFeeDestinationCall) {
    this._call = call;
  }
}

export class SetProtocolFeePercentCall extends ethereum.Call {
  get inputs(): SetProtocolFeePercentCall__Inputs {
    return new SetProtocolFeePercentCall__Inputs(this);
  }

  get outputs(): SetProtocolFeePercentCall__Outputs {
    return new SetProtocolFeePercentCall__Outputs(this);
  }
}

export class SetProtocolFeePercentCall__Inputs {
  _call: SetProtocolFeePercentCall;

  constructor(call: SetProtocolFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeePercentCall__Outputs {
  _call: SetProtocolFeePercentCall;

  constructor(call: SetProtocolFeePercentCall) {
    this._call = call;
  }
}

export class SetReferrerCall extends ethereum.Call {
  get inputs(): SetReferrerCall__Inputs {
    return new SetReferrerCall__Inputs(this);
  }

  get outputs(): SetReferrerCall__Outputs {
    return new SetReferrerCall__Outputs(this);
  }
}

export class SetReferrerCall__Inputs {
  _call: SetReferrerCall;

  constructor(call: SetReferrerCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _referrer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetReferrerCall__Outputs {
  _call: SetReferrerCall;

  constructor(call: SetReferrerCall) {
    this._call = call;
  }
}

export class SetReferrerFeePercentCall extends ethereum.Call {
  get inputs(): SetReferrerFeePercentCall__Inputs {
    return new SetReferrerFeePercentCall__Inputs(this);
  }

  get outputs(): SetReferrerFeePercentCall__Outputs {
    return new SetReferrerFeePercentCall__Outputs(this);
  }
}

export class SetReferrerFeePercentCall__Inputs {
  _call: SetReferrerFeePercentCall;

  constructor(call: SetReferrerFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReferrerFeePercentCall__Outputs {
  _call: SetReferrerFeePercentCall;

  constructor(call: SetReferrerFeePercentCall) {
    this._call = call;
  }
}

export class SetRelayerCall extends ethereum.Call {
  get inputs(): SetRelayerCall__Inputs {
    return new SetRelayerCall__Inputs(this);
  }

  get outputs(): SetRelayerCall__Outputs {
    return new SetRelayerCall__Outputs(this);
  }
}

export class SetRelayerCall__Inputs {
  _call: SetRelayerCall;

  constructor(call: SetRelayerCall) {
    this._call = call;
  }

  get _relayer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRelayerCall__Outputs {
  _call: SetRelayerCall;

  constructor(call: SetRelayerCall) {
    this._call = call;
  }
}

export class SetSubjectFeePercentCall extends ethereum.Call {
  get inputs(): SetSubjectFeePercentCall__Inputs {
    return new SetSubjectFeePercentCall__Inputs(this);
  }

  get outputs(): SetSubjectFeePercentCall__Outputs {
    return new SetSubjectFeePercentCall__Outputs(this);
  }
}

export class SetSubjectFeePercentCall__Inputs {
  _call: SetSubjectFeePercentCall;

  constructor(call: SetSubjectFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSubjectFeePercentCall__Outputs {
  _call: SetSubjectFeePercentCall;

  constructor(call: SetSubjectFeePercentCall) {
    this._call = call;
  }
}

export class SetTournamentCACall extends ethereum.Call {
  get inputs(): SetTournamentCACall__Inputs {
    return new SetTournamentCACall__Inputs(this);
  }

  get outputs(): SetTournamentCACall__Outputs {
    return new SetTournamentCACall__Outputs(this);
  }
}

export class SetTournamentCACall__Inputs {
  _call: SetTournamentCACall;

  constructor(call: SetTournamentCACall) {
    this._call = call;
  }

  get _tournament(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTournamentCACall__Outputs {
  _call: SetTournamentCACall;

  constructor(call: SetTournamentCACall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
